---
description: 整体遵循此文件
globs: 
alwaysApply: false
---

# 规则文件

- 这个项目是基于shadcn、msw完成的一个纯前端项目。使用shadcn+next.js的框架完成前端。
- 使用msw完成后端模拟。
- 不允许在所有前端部分的实现代码里做任何形式的代码侵入，包括并不限于（使用静态数据....，在实现代码中以任何形式直接添加数据，在服务器端渲染时直接返回模拟数据，而不尝试进行网络请求,在代码中硬编码任何模拟数据) 不允许！
- 所有的应用页面文件存储在app中，所有的组件文件存储在components中
- API 路径策略需要统一
- 数据结构需要一致
- 为我提供可能需要终端运行的命令。例如更名、删除等操作
- 项目没有 src目录
- 为MSW的handler按照具体功能命名
- shadcn相关的安装命令为 npm shadcn@latest 而不是npm shadcn-ui@latest
- 所有的页面添加skeleton加载
- toast 使用sonner
- 如果任务完成的话，不需要给我文字总结
- mocks/index.ts - The main entry point that initializes MSW
mocks/browser.ts - Browser-specific MSW setup
mocks/node.ts - Node.js-specific MSW setup
mocks/db.ts - Database setup for MSW
mocks/handlers/ - Directory containing all API handlers organized by feature:
mocks/handlers/index.ts - Aggregates all handlers
Various feature-specific handler files (auth.ts, user.ts, etc.)
- UI设计使用现代极简主义、适应功能美学。
- 设计规范：
1.极简主义 (Minimalism)
​干净界面：大量留白、无冗余装饰，减少视觉干扰，突出内容本身。
​中性色调：以黑白灰为主色，搭配柔和的低饱和度色彩（如浅蓝、浅粉）作为点缀。
​圆角与柔和阴影：按钮、卡片等元素采用圆角设计，搭配轻微阴影，营造轻盈的层次感。
2.功能性导向
​模块化设计：通过“块”（Blocks）系统自由组合内容（文本、表格、图片等），类似拼图式操作。
​统一性：所有功能（数据库、日历、看板）保持一致的交互逻辑，降低学习成本。
3.克制的美学
​无衬线字体：使用简洁的 Inter 或 Helvetica 字体，确保可读性。
​扁平化图标：图标设计去除了复杂细节，仅保留核心符号，符合现代扁平化趋势。
4.​线性风格 (Line Icons)：
图标以单线条勾勒，线条粗细一致，边缘平滑（如文档、数据库、表情符号图标）。
​极简抽象：用最简单的图形表达功能（例如“加号”表示新建，“齿轮”表示设置）。
​中性配色：默认黑白灰，激活状态时辅以柔和的蓝色或黄色高亮，避免视觉疲劳。
# MSW
This page elaborates on the mental models that MSW and, by the extension, you adopt when approaching API mocking. This is a great page to share with people wondering what makes MSW unique on a conceptual level, and for those craving a more practical perspective, we have the Comparison page prepared.

Mocking as a standalone layer
Mock Service Worker is simultaneously similar and nothing alike other API mocking solutions. While it provides you with the ability to intercept outgoing requests and mock their responses, it’s not coupled with any particular testing or development tooling. This small distinction enables most of the benefits that MSW provides.

We are convinced that API mocking deserves a layer of its own in your application. Being able to control the network any time and anywhere may come in handy in various situations, such as testing network-related code or reproducing and debugging a particular network scenario. Such level of control is simply impossible when using API mocking as a feature of any other tooling because you will always be limited by that tooling. There are no limits with MSW.

Mock vs Network behavior
You may find us seldom using the term “mocks” in this documentation. Historically, there’s been a strong negative association with this term as developers come to see mocking as something dirty, unreliable, and hacky. Well, because it was until MSW came along.

MSW utilizes minimal intrusion framework when it comes to intercepting outgoing network traffic. This means having zero changes to your code altogether by using a designated Service Worker in the browser, or implementing custom request interception algorithms in Node.js that focus on the integrity of your code. We’ve put a ton of effort into respecting your application and, as a favor in return, we’re coining a new term—network behavior.

Network behavior is a contract-like description of the network’s expected state. “When request X happens, respond with Y.” This is precisely the level of abstraction you will be working with when using MSW, and it is a level that reads, scales, and maintains well.

Using the platform
If you’ve used any API mocking solutions in the past, you know how much they can vary in terms of their syntax and implementation. From method chaining to controller definitions, from listing network scenarios in a JSON file to adopting a framework-like routing. There’s always a lot of specific knowledge to keep in mind, knowledge that doesn’t stretch outside particular tools and, oftentimes, doesn’t teach you about what is it you’re doing when mocking APIs.

We see developer education as an inseparable part of the developer experience. We dedicate constant effort to minimize the amount of library-specific knowledge you need to have to use MSW. Instead, we rely on standard APIs and platform features so you would actually learn how to work with requests and responses (and we would ship less code, which is yay!).

We embrace the WHATWG Fetch API specification, meaning that each intercepted request is an actual Request instance, and each mocked response is an actual Response instance. We embrace the Service Worker API to intercept requests on the browser’s network level so that your application and tests would know nothing about mocking in place. We depend on semantics and standards instead of contriving custom APIs to satisfy particular use cases. And this is one of the reasons why so many developers trust us with their CI/CD pipelines.

For example, this is how you respond with a mocked redirect in MSW:

http.get('/old', () => {
  return new Response(null, {
    status: 302,
    headers: {
      Location: '/new',
    },
  })
})
Server’s perspective
When working with MSW, you will be writing request handlers to intercept and respond to requests. It’s important to approach those handlers from the server’s perspective since, effectively, you are describing how the server should behave in a particlar scenario.
